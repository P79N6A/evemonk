version: '3.7'

volumes:
  postresql-data:
  redis-data:
  assets:
  packs:
  node_modules:

services:
  nginx:
    image: 'nginx:1.14.2'
    restart: unless-stopped
    volumes:
      - 'assets:/app/public/assets'
      - 'packs:/app/public/packs'

  redis:
    image: 'redis:5.0.4'
    restart: unless-stopped
    volumes:
      - 'redis-data:/data'

  memcached:
    image: 'memcached:1.5.12'
    restart: unless-stopped
    command: memcached -m 64

  postgresql:
    image: 'postgres:11.2'
    restart: unless-stopped
    volumes:
      - 'postresql-data:/var/lib/postgresql/data'

  prometheus:
    image: 'prom/prometheus:v2.8.0'
    restart: unless-stopped
    depends_on:
      - backend

  grafana:
    image: 'grafana/grafana:6.0.2'
    restart: unless-stopped
    depends_on:
      - prometheus

  elasticsearch:
    image: 'elasticsearch:6.6.2'
    restart: unless-stopped

#  sentry:
#    image: ''
#    depends_on:
#      - postgresql
#      - redis

  app: &app
    build: .
    restart: 'no'
    env_file: .env_docker
    volumes:
      - 'assets:/app/public/assets'
      - 'packs:/app/public/packs'
      - 'node_modules:/app/node_modules'

  migrations:
    <<: *app
    build: .
    restart: 'no'
    env_file: .env_docker
    command: wait-for-it elasticsearch:9200 --timeout=60 -- bundle exec rails db:migrate searchkick:reindex CLASS=Eve::Alliance
    depends_on:
      - elasticsearch

  backend:
    <<: *app
    restart: unless-stopped
    command: wait-for-it postgresql:5432 --timeout=60 -- bundle exec rails s -p 3000 -b '0.0.0.0'
    ports:
      - '3000:3000'
    depends_on:
      - redis
      - memcached
      - postgresql
      - elasticsearch
#      - sentry

  sidekiq:
    <<: *app
    restart: unless-stopped
    command: wait-for-it postgresql:5432 --timeout=60 -- bundle exec sidekiq
    depends_on:
      - migrations
      - redis
      - memcached
      - postgresql
      - elasticsearch
#      - sentry
